
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000014a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000000  00800200  0000014a  000001de  2**0
                  ALLOC
  3 .noinit       00000000  00800200  00800200  000001de  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000001de  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000001b  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000008c  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000052  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000000b4  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000009e  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  64:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  68:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e4       	ldi	r30, 0x4A	; 74
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a0 30       	cpi	r26, 0x00	; 0
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0c 94 91 00 	jmp	0x122 <main>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0x0 <__vectors>

00000122 <main>:



int main(void)
{
 122:	cf ef       	ldi	r28, 0xFF	; 255
 124:	d1 e2       	ldi	r29, 0x21	; 33
 126:	de bf       	out	0x3e, r29	; 62
 128:	cd bf       	out	0x3d, r28	; 61
	cli();
 12a:	f8 94       	cli

	DDRD = 255;	
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 130:	1b b8       	out	0x0b, r1	; 11
	
	DDRH = 0;	
 132:	10 92 01 01 	sts	0x0101, r1
 136:	90 e1       	ldi	r25, 0x10	; 16
	
	char sw = 0;


	while(1)
	{
		PORTD = 0x00;
 138:	1b b8       	out	0x0b, r1	; 11
		sw = PINH;
 13a:	80 91 00 01 	lds	r24, 0x0100
		sw = sw & 0xc0;
 13e:	80 7c       	andi	r24, 0xC0	; 192
		if(sw>0) PORTD = 0x10;
 140:	11 f0       	breq	.+4      	; 0x146 <main+0x24>
 142:	9b b9       	out	0x0b, r25	; 11
 144:	f9 cf       	rjmp	.-14     	; 0x138 <main+0x16>
		else PORTD = 0x00;
 146:	8b b9       	out	0x0b, r24	; 11
 148:	f7 cf       	rjmp	.-18     	; 0x138 <main+0x16>
