
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800250  00800250  00000496  2**0
                  ALLOC
  3 .stab         00000414  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000016a  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000411  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000218  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000548  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000224  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000004e  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_10>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_17>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 eb       	ldi	r30, 0xB2	; 178
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 35       	cpi	r26, 0x50	; 80
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e5       	ldi	r26, 0x50	; 80
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	ac 35       	cpi	r26, 0x5C	; 92
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
 11e:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <__vector_10>:
enum { UP,RIGHT,DOWN,LEFT };


ISR (PCINT1_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	line_triggered =0;  //so display will preserve last mouse move.
 138:	10 92 58 02 	sts	0x0258, r1
	
	//read ports in case there is another change
	int8_t current_line = LINE_PORT1;	
 13c:	30 91 03 01 	lds	r19, 0x0103
	int8_t pin_change = (previous_port_j^current_line)&(previous_port_j^interrupt_edge_port_j);  //mask the single bit
 140:	20 91 57 02 	lds	r18, 0x0257
 144:	80 91 57 02 	lds	r24, 0x0257
 148:	90 91 5b 02 	lds	r25, 0x025B
 14c:	23 27       	eor	r18, r19
 14e:	89 27       	eor	r24, r25
 150:	28 23       	and	r18, r24
	
	if(pin_change==_BV(LINE_1)&&(current_line&_BV(LINE_1)))
 152:	20 31       	cpi	r18, 0x10	; 16
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_10+0x36>
 156:	34 ff       	sbrs	r19, 4
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_10+0x44>
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_10+0x3e>
	{
		line_triggered =1;
	}
	
	if(pin_change==_BV(LINE_2))
 15c:	20 32       	cpi	r18, 0x20	; 32
 15e:	11 f0       	breq	.+4      	; 0x164 <__vector_10+0x3e>
	{
		line_triggered =1;
	}
	
	if(pin_change==_BV(LINE_3))
 160:	20 34       	cpi	r18, 0x40	; 64
 162:	19 f4       	brne	.+6      	; 0x16a <__vector_10+0x44>
	{
		line_triggered =1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 58 02 	sts	0x0258, r24
	}
		
	
	previous_port_j = current_line;	
 16a:	30 93 57 02 	sts	0x0257, r19
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <ioinit>:
	
}

ISR (TIMER1_COMPA_vect)		
{
	//static int8_t count =0;
	static int8_t comcount =0;
	static int16_t line;
	static int16_t *p;
	
		
	if(sw ==0)
	{
		line = 0x00FF;
	}
	else 
	{
		line = 0xF0F0;
	}
	
		//send line
		LED_Send_Line(line);
		
		
		//increment common driver
		
		LED_Set_Common(comcount);
		comcount++;
		
	switch (comcount)		
    {
        case 1:
            OCR4C = 0x0000;
			OCR4B = 0x0000;
            break;
			
		case 2:
            OCR4C = 0xFFFF;
			OCR4B = 0x0000;
            break;
			
		case 3:
            OCR4C = 0xFFFF;
			OCR4B = 0xFFFF;
            break;
			
		case 4:
            OCR4C = 0x0000;
			OCR4B = 0xFFFF;
            break;
			
		case 5:
            OCR4C = 0x0000;
			OCR4B = 0x0000;
            break;
			
		case 6:
            OCR4C = 0xFFFF;
			OCR4B = 0x0000;
            break;
			
		case 7:
            OCR4C = 0xFFFF;
			OCR4B = 0xFFFF;
            break;
			
		case 8:
            OCR4C = 0x0000;
			OCR4B = 0xFFFF;
            break;

        
    }
	
	if(comcount > 7)
		comcount = 0; //go back to first line
	
	
	
	
	
}



void ioinit (void)			/* Note [6] */
{
 180:	10 92 80 00 	sts	0x0080, r1
    /* Normal mode */
    TCCR1A = 0;
	
    /*
     * Start timer 1.
     */
    TCCR1B = _BV(CS11)|_BV(CS10); //  1/64 prescaler    
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); //Clear timer on Compare match with OCR1A
 18c:	80 81       	ld	r24, Z
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 83       	st	Z, r24

    /* Enable timer 1 overflow interrupt. */
    TIMSK1 = _BV (OCIE1A);
 192:	22 e0       	ldi	r18, 0x02	; 2
 194:	20 93 6f 00 	sts	0x006F, r18
	
	OCR1A = 0x186a;    	//0x1FFF = 30Hz  @ 1/8 prescaler
 198:	8a e6       	ldi	r24, 0x6A	; 106
 19a:	98 e1       	ldi	r25, 0x18	; 24
 19c:	90 93 89 00 	sts	0x0089, r25
 1a0:	80 93 88 00 	sts	0x0088, r24
						//0x7A12 = 1Hz   @ 1/64 prescaler
						//0x186A = 5Hz   @ 1/64 prescaler
						//0x0C35 = 10Hz   @ 1/64 prescaler
						//0x061A = 20Hz   @ 1/64 prescaler
						//0x0411 = 30Hz   @ 1/64 prescaler
						//0x037C = 30Hz   @ 1/64 prescaler
						//0x030D = 40Hz   @ 1/64 prescaler
						
	//Setup Pin Change Inerrupt
	PCICR = _BV(PCIE1);   //enable Pin Change int 1 for PCINT 8-15  (11 for X1)
 1a4:	20 93 68 00 	sts	0x0068, r18
	PCMSK1 = _BV(PCINT9)|_BV(PCINT10)|_BV(PCINT11)|_BV(PCINT12)|_BV(PCINT13)|_BV(PCINT14)|_BV(PCINT15);  //mouse and line sensors
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	80 93 6c 00 	sts	0x006C, r24
	
	//motor OCRs
	TCCR4A= _BV(WGM40)|_BV(COM4C1)|_BV(COM4B1);
 1ae:	89 e2       	ldi	r24, 0x29	; 41
 1b0:	80 93 a0 00 	sts	0x00A0, r24
	
	
	TCCR4B = _BV(CS41);//|_BV(CS40); //   prescaler
 1b4:	20 93 a1 00 	sts	0x00A1, r18
	
	OCR4C = 0;
 1b8:	10 92 ad 00 	sts	0x00AD, r1
 1bc:	10 92 ac 00 	sts	0x00AC, r1
	OCR4B =0;
 1c0:	10 92 ab 00 	sts	0x00AB, r1
 1c4:	10 92 aa 00 	sts	0x00AA, r1
	
    sei ();
 1c8:	78 94       	sei
 1ca:	08 95       	ret

000001cc <main>:
}


int main(void)
{			
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 54 02 	sts	0x0254, r24
	char line = 0;
	
	led_on = 1;
	line_triggered = 1;
 1d2:	80 93 58 02 	sts	0x0258, r24
	Setup_Sumo_Ports();
 1d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Setup_Sumo_Ports>
	ioinit ();
 1da:	0e 94 c0 00 	call	0x180	; 0x180 <ioinit>
	
	//setup pin change edges
	interrupt_edge_port_j = 0x7F; //first seven bits for mouse and 3xline
 1de:	8f e7       	ldi	r24, 0x7F	; 127
 1e0:	80 93 5b 02 	sts	0x025B, r24
	previous_port_j = 0x00;
 1e4:	10 92 57 02 	sts	0x0257, r1
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0x1c>

000001ea <__vector_17>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	80 91 50 02 	lds	r24, 0x0250
 210:	88 23       	and	r24, r24
 212:	19 f4       	brne	.+6      	; 0x21a <__vector_17+0x30>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <__vector_17+0x34>
 21a:	80 ef       	ldi	r24, 0xF0	; 240
 21c:	90 ef       	ldi	r25, 0xF0	; 240
 21e:	90 93 52 02 	sts	0x0252, r25
 222:	80 93 51 02 	sts	0x0251, r24
 226:	80 91 51 02 	lds	r24, 0x0251
 22a:	90 91 52 02 	lds	r25, 0x0252
 22e:	0e 94 9a 01 	call	0x334	; 0x334 <LED_Send_Line>
 232:	80 91 53 02 	lds	r24, 0x0253
 236:	0e 94 c7 01 	call	0x38e	; 0x38e <LED_Set_Common>
 23a:	80 91 53 02 	lds	r24, 0x0253
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 53 02 	sts	0x0253, r24
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	e9 f0       	breq	.+58     	; 0x282 <__vector_17+0x98>
 248:	85 30       	cpi	r24, 0x05	; 5
 24a:	3c f4       	brge	.+14     	; 0x25a <__vector_17+0x70>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	71 f0       	breq	.+28     	; 0x26c <__vector_17+0x82>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	1c f5       	brge	.+70     	; 0x29a <__vector_17+0xb0>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	b9 f5       	brne	.+110    	; 0x2c6 <__vector_17+0xdc>
 258:	1b c0       	rjmp	.+54     	; 0x290 <__vector_17+0xa6>
 25a:	86 30       	cpi	r24, 0x06	; 6
 25c:	39 f0       	breq	.+14     	; 0x26c <__vector_17+0x82>
 25e:	86 30       	cpi	r24, 0x06	; 6
 260:	bc f0       	brlt	.+46     	; 0x290 <__vector_17+0xa6>
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	d1 f0       	breq	.+52     	; 0x29a <__vector_17+0xb0>
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	71 f5       	brne	.+92     	; 0x2c6 <__vector_17+0xdc>
 26a:	22 c0       	rjmp	.+68     	; 0x2b0 <__vector_17+0xc6>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	90 93 ad 00 	sts	0x00AD, r25
 274:	80 93 ac 00 	sts	0x00AC, r24
 278:	10 92 ab 00 	sts	0x00AB, r1
 27c:	10 92 aa 00 	sts	0x00AA, r1
 280:	26 c0       	rjmp	.+76     	; 0x2ce <__vector_17+0xe4>
 282:	10 92 ad 00 	sts	0x00AD, r1
 286:	10 92 ac 00 	sts	0x00AC, r1
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	9f ef       	ldi	r25, 0xFF	; 255
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <__vector_17+0xbc>
 290:	10 92 ad 00 	sts	0x00AD, r1
 294:	10 92 ac 00 	sts	0x00AC, r1
 298:	ef cf       	rjmp	.-34     	; 0x278 <__vector_17+0x8e>
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	9f ef       	ldi	r25, 0xFF	; 255
 29e:	90 93 ad 00 	sts	0x00AD, r25
 2a2:	80 93 ac 00 	sts	0x00AC, r24
 2a6:	90 93 ab 00 	sts	0x00AB, r25
 2aa:	80 93 aa 00 	sts	0x00AA, r24
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <__vector_17+0xe4>
 2b0:	10 92 ad 00 	sts	0x00AD, r1
 2b4:	10 92 ac 00 	sts	0x00AC, r1
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	90 93 ab 00 	sts	0x00AB, r25
 2c0:	80 93 aa 00 	sts	0x00AA, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_17+0xe0>
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	14 f0       	brlt	.+4      	; 0x2ce <__vector_17+0xe4>
 2ca:	10 92 53 02 	sts	0x0253, r1
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <Setup_Sumo_Ports>:



void Setup_Sumo_Ports(void)
{
 2f0:	90 ef       	ldi	r25, 0xF0	; 240
 2f2:	9a b9       	out	0x0a, r25	; 10
	//PORT A
	//SRAM Address bits.  Low Byte

	//PORT B
	//SPI BUS

	//PORT C
	//SRAM Addres bits.  High Byte

	//PORT D
	//I2C.  USART2.  LED Matrix CSEL and DSEL
	DDRD = _BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7);
	PORTD &= 0x0F;
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	8b b9       	out	0x0b, r24	; 11

	//PORT E
	//USART1.  SD Card inputs.  Motor2 PWM.  Sound PWM

	//PORT F
	//Extra ADC.  JTAG

	//PORT G
	//SRAM control.  SRAM A16 bit.  Timing oscillator

	//PORT H
	//Mouse (non interrupt).  Motor1 PWM.  Switch inputs
	DDRH = _BV(4)|_BV(PH5);
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	80 93 01 01 	sts	0x0101, r24

	//PORT J
	//Mouse (interrupts).  Line inputs (interrupts).  3v3 enable.
	DDRJ = _BV(PJ7);
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	80 93 04 01 	sts	0x0104, r24
	PORTJ |= _BV(PJ7);   //turn on 3.3V
 306:	e5 e0       	ldi	r30, 0x05	; 5
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24

	//PORT K
	//Voltage sense.  IR range ADC.  Line 4 input (interrupt).

	//PORT L
	//Bump inputs.  LED Matrix control
	DDRL = _BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7);
 310:	90 93 0a 01 	sts	0x010A, r25
	PORTL &= 0x0F;
 314:	eb e0       	ldi	r30, 0x0B	; 11
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	80 81       	ld	r24, Z
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <Get_Switch>:
#include "sumo_util.h"
#include "sumo_ports.h"

uint8_t Get_Switch(uint8_t sw)
{
 320:	90 91 00 01 	lds	r25, 0x0100
 324:	82 95       	swap	r24
 326:	88 0f       	add	r24, r24
 328:	88 0f       	add	r24, r24
 32a:	80 7c       	andi	r24, 0xC0	; 192
 32c:	98 23       	and	r25, r24
	uint8_t swin = SW_PORT;
	return (swin & (sw<<6));
}
 32e:	89 2f       	mov	r24, r25
 330:	99 27       	eor	r25, r25
 332:	08 95       	ret

00000334 <LED_Send_Line>:



void LED_Send_Line(uint16_t line)  //clock in 16 bits into segment driver and latch
{
 334:	9c 01       	movw	r18, r24
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
	
	for(uint16_t i=0;i<16;i++) //LSB first
	{
		if((line & 0x01) > 0) //check MSB
 33a:	20 ff       	sbrs	r18, 0
 33c:	04 c0       	rjmp	.+8      	; 0x346 <LED_Send_Line+0x12>
		{
			LED_PORT2 |= _BV(LED_SIN);			
 33e:	80 91 0b 01 	lds	r24, 0x010B
 342:	80 62       	ori	r24, 0x20	; 32
 344:	03 c0       	rjmp	.+6      	; 0x34c <LED_Send_Line+0x18>
		}
		else
		{
			LED_PORT2 &= ~(_BV(LED_SIN));
 346:	80 91 0b 01 	lds	r24, 0x010B
 34a:	8f 7d       	andi	r24, 0xDF	; 223
 34c:	80 93 0b 01 	sts	0x010B, r24
		}
		line >>= 1;  //shift data right one	
		//NOP;
		
		//clock in bit
		LED_PORT2 |= _BV(LED_SCLK);  //set clock high
 350:	80 91 0b 01 	lds	r24, 0x010B
 354:	80 61       	ori	r24, 0x10	; 16
 356:	80 93 0b 01 	sts	0x010B, r24
		NOP;
 35a:	00 00       	nop
		LED_PORT2 &= ~(_BV(LED_SCLK)); //set clock low		
 35c:	80 91 0b 01 	lds	r24, 0x010B
 360:	8f 7e       	andi	r24, 0xEF	; 239
 362:	80 93 0b 01 	sts	0x010B, r24
 366:	4f 5f       	subi	r20, 0xFF	; 255
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	40 31       	cpi	r20, 0x10	; 16
 36c:	51 05       	cpc	r21, r1
 36e:	19 f0       	breq	.+6      	; 0x376 <LED_Send_Line+0x42>
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	e2 cf       	rjmp	.-60     	; 0x33a <LED_Send_Line+0x6>
		
	}
	
	//latch in line
		LED_PORT2 |= _BV(LED_LATCH);  //set clock high
 376:	80 91 0b 01 	lds	r24, 0x010B
 37a:	80 64       	ori	r24, 0x40	; 64
 37c:	80 93 0b 01 	sts	0x010B, r24
		NOP;
 380:	00 00       	nop
		LED_PORT2 &= ~(_BV(LED_LATCH)); //set clock low	
 382:	80 91 0b 01 	lds	r24, 0x010B
 386:	8f 7b       	andi	r24, 0xBF	; 191
 388:	80 93 0b 01 	sts	0x010B, r24
 38c:	08 95       	ret

0000038e <LED_Set_Common>:
}


void LED_Set_Common(uint8_t com)	//set the common driver  Range 0-7
{
 38e:	eb e0       	ldi	r30, 0x0B	; 11
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	90 81       	ld	r25, Z
 394:	90 68       	ori	r25, 0x80	; 128
 396:	90 83       	st	Z, r25
	LED_PORT2 |= _BV(LED_BLANK);  //Blank LEDs
				
		com <<= 4;   //shift so it matches bits on port
		LED_PORT1 &= ~(_BV(LED_CSEL0)|_BV(LED_CSEL1)|_BV(LED_CSEL2));  //clear CSEL bits
 398:	9b b1       	in	r25, 0x0b	; 11
 39a:	9f 78       	andi	r25, 0x8F	; 143
 39c:	9b b9       	out	0x0b, r25	; 11
		LED_PORT1 |= com;  //set new CSEL values
 39e:	9b b1       	in	r25, 0x0b	; 11
 3a0:	82 95       	swap	r24
 3a2:	80 7f       	andi	r24, 0xF0	; 240
 3a4:	98 2b       	or	r25, r24
 3a6:	9b b9       	out	0x0b, r25	; 11
		
	LED_PORT2 &= ~(_BV(LED_BLANK)); //Un-blank LEDS
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 77       	andi	r24, 0x7F	; 127
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <_exit>
