
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  000003e4  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800250  00800250  000004c8  2**0
                  ALLOC
  3 .stab         00000414  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000016a  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000442  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000023e  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005a9  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000022b  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000082  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_10>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_17>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 ee       	ldi	r30, 0xE4	; 228
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 35       	cpi	r26, 0x50	; 80
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e5       	ldi	r26, 0x50	; 80
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	ac 35       	cpi	r26, 0x5C	; 92
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
 11e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <__vector_10>:
enum { UP,RIGHT,DOWN,LEFT };


ISR (PCINT1_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	line_triggered =0;  //so display will preserve last mouse move.
 138:	10 92 58 02 	sts	0x0258, r1
	
	//read ports in case there is another change
	int8_t current_line = LINE_PORT1;	
 13c:	30 91 03 01 	lds	r19, 0x0103
	int8_t pin_change = (previous_port_j^current_line)&(previous_port_j^interrupt_edge_port_j);  //mask the single bit
 140:	20 91 57 02 	lds	r18, 0x0257
 144:	80 91 57 02 	lds	r24, 0x0257
 148:	90 91 5b 02 	lds	r25, 0x025B
 14c:	23 27       	eor	r18, r19
 14e:	89 27       	eor	r24, r25
 150:	28 23       	and	r18, r24
	
	if(pin_change==_BV(LINE_1)&&(current_line&_BV(LINE_1)))
 152:	20 31       	cpi	r18, 0x10	; 16
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_10+0x36>
 156:	34 ff       	sbrs	r19, 4
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_10+0x44>
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_10+0x3e>
	{
		line_triggered =1;
	}
	
	if(pin_change==_BV(LINE_2))
 15c:	20 32       	cpi	r18, 0x20	; 32
 15e:	11 f0       	breq	.+4      	; 0x164 <__vector_10+0x3e>
	{
		line_triggered =1;
	}
	
	if(pin_change==_BV(LINE_3))
 160:	20 34       	cpi	r18, 0x40	; 64
 162:	19 f4       	brne	.+6      	; 0x16a <__vector_10+0x44>
	{
		line_triggered =1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 58 02 	sts	0x0258, r24
	}
		
	
	previous_port_j = current_line;	
 16a:	30 93 57 02 	sts	0x0257, r19
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <ioinit>:
	
}

		

//void Step(void)
ISR (TIMER1_COMPA_vect)
{
	//static int8_t count =0;
	static int8_t comcount =0;
	static int16_t line;
	static int16_t *p;
	
		
	if(sw ==0)
	{
		line = 0x00FF;
	}
	else 
	{
		line = 0xF0F0;
	}
	
		//send line
		LED_Send_Line(line);
		
		
		//increment common driver
		
		LED_Set_Common(comcount);
		comcount++;
		
	switch (comcount)		
    {
        case 1:
            M1_OCR_A = MOTOR_HIGH;
			M1_OCR_B = MOTOR_LOW;
			M2_OCR_A = MOTOR_HIGH;
			M2_OCR_B = MOTOR_LOW;
			
			//PORTH = _BV(PH4)|_BV(PH5);
			//PORTE = 0;
			//PORTE = _BV(PE4)|_BV(PE5);
            break;
			
		case 2:
            M1_OCR_A = MOTOR_LOW;
			M1_OCR_B = MOTOR_LOW;
			M2_OCR_A = MOTOR_HIGH;
			M2_OCR_B = MOTOR_HIGH;
			//PORTH = _BV(PH4);
			//PORTE = _BV(PE4);
            break;
			
		case 3:
            M1_OCR_A = MOTOR_LOW;
			M1_OCR_B = MOTOR_HIGH;
			M2_OCR_A = MOTOR_LOW;
			M2_OCR_B = MOTOR_HIGH;
			//PORTH = 0;
			//PORTE = 0;
			//PORTE = _BV(PE4)|_BV(PE5);
            break;
			
		case 4:
            M1_OCR_A = MOTOR_HIGH;
			M1_OCR_B = MOTOR_HIGH;
			M2_OCR_A = MOTOR_LOW;
			M2_OCR_B = MOTOR_LOW;
			//PORTH = _BV(PH5);
			//PORTE = _BV(PE5);
            break;
			
		case 5:
            M1_OCR_A = MOTOR_HIGH;
			M1_OCR_B = MOTOR_LOW;
			M2_OCR_A = MOTOR_HIGH;
			M2_OCR_B = MOTOR_LOW;
			//PORTH = _BV(PH4)|_BV(PH5);
			//PORTE = 0;//_BV(PE4)|_BV(PE5);
            break;
			
		case 6:
            M1_OCR_A = MOTOR_LOW;
			M1_OCR_B = MOTOR_LOW;
			M2_OCR_A = MOTOR_HIGH;
			M2_OCR_B = MOTOR_HIGH;
			//PORTH = _BV(PH4);
			//PORTE = _BV(PE4);
            break;
			
		case 7:
            M1_OCR_A = MOTOR_LOW;
			M1_OCR_B = MOTOR_HIGH;
			M2_OCR_A = MOTOR_LOW;
			M2_OCR_B = MOTOR_HIGH;
			//PORTH = 0;
			//PORTE = _BV(PE4)|_BV(PE5);
            break;
			
		case 8:
            M1_OCR_A = MOTOR_HIGH;
			M1_OCR_B = MOTOR_HIGH;
			M2_OCR_A = MOTOR_LOW;
			M2_OCR_B = MOTOR_LOW;
			//PORTH = _BV(PH5);
			//PORTE = _BV(PE5);
            break;

        
    }
	
	if(comcount > 7)
	{
		comcount = 0; //go back to first line	
		/*if(OCR1A>0x0aFF)
		OCR1A -= 0x0F ;
			
		if(OCR1A > 0x1FFF)
			OCR1A = 0x1FFF;
			*/
	}
	
}
/*
ISR (TIMER1_COMPA_vect){
	//static int8_t count =0;
	static int8_t comcount =0;
	static int16_t line;
	static int16_t *p;
	
		
	if(sw ==0)
	{
		line = 0x00FF;
	}
	else 
	{
		line = 0xF0F0;
	}
	
		//send line
		LED_Send_Line(line);
		
		
		//increment common driver
		
		LED_Set_Common(comcount);
		comcount++;
		
	switch (comcount)		
    {
        case 1:
            OCR4C = 0x0001;
			OCR4B = 0x0001;
            break;
			
		case 2:
            OCR4C = 0xFFFE;
			OCR4B = 0x0001;
            break;
			
		case 3:
            OCR4C = 0xFFFE;
			OCR4B = 0xFFFE;
            break;
			
		case 4:
            OCR4C = 0x0001;
			OCR4B = 0xFFFE;
            break;
			
		case 5:
            OCR4C = 0x0001;
			OCR4B = 0x0001;
            break;
			
		case 6:
            OCR4C = 0xFFFE;
			OCR4B = 0x0001;
            break;
			
		case 7:
            OCR4C = 0xFFFE;
			OCR4B = 0xFFFF;
            break;
			
		case 8:
            OCR4C = 0x0001;
			OCR4B = 0xFFFE;
            break;

        
    }
	
	if(comcount > 7)
		comcount = 0; //go back to first line	
	
}*/



void ioinit (void)			/* Note [6] */
{
 180:	10 92 80 00 	sts	0x0080, r1
    /* Normal mode */
    TCCR1A = 0;
	
    /*
     * Start timer 1.
     */
    TCCR1B = _BV(CS11);//|_BV(CS10); //  1/64 prescaler    
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	90 83       	st	Z, r25
	TCCR1B |= _BV(WGM12); //Clear timer on Compare match with OCR1A
 18c:	80 81       	ld	r24, Z
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 83       	st	Z, r24

    /* Enable timer 1 overflow interrupt. */
    TIMSK1 = _BV (OCIE1A);
 192:	90 93 6f 00 	sts	0x006F, r25
	
	OCR1A = 0x1F12;    	//0x1FFF = 30Hz  @ 1/8 prescaler
 196:	82 e1       	ldi	r24, 0x12	; 18
 198:	9f e1       	ldi	r25, 0x1F	; 31
 19a:	90 93 89 00 	sts	0x0089, r25
 19e:	80 93 88 00 	sts	0x0088, r24
						//0x7A12 = 1Hz   @ 1/64 prescaler
						//0x186A = 5Hz   @ 1/64 prescaler
						//0x0C35 = 10Hz   @ 1/64 prescaler
						//0x061A = 20Hz   @ 1/64 prescaler
						//0x0411 = 30Hz   @ 1/64 prescaler
						//0x037C = 30Hz   @ 1/64 prescaler
						//0x030D = 40Hz   @ 1/64 prescaler
						
	//Setup Pin Change Inerrupt
	//PCICR = _BV(PCIE1);   //enable Pin Change int 1 for PCINT 8-15  (11 for X1)
	//PCMSK1 = _BV(PCINT9)|_BV(PCINT10)|_BV(PCINT11)|_BV(PCINT12)|_BV(PCINT13)|_BV(PCINT14)|_BV(PCINT15);  //mouse and line sensors
	
	//motor 1 OCRs
	TCCR4A= _BV(WGM40)|_BV(COM4C1)|_BV(COM4B1);
 1a2:	99 e2       	ldi	r25, 0x29	; 41
 1a4:	90 93 a0 00 	sts	0x00A0, r25
	TCCR4B = _BV(CS40);//|_BV(WGM42);//|_BV(CS40); //   prescaler
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 a1 00 	sts	0x00A1, r24
	
	OCR4C = 0;
 1ae:	10 92 ad 00 	sts	0x00AD, r1
 1b2:	10 92 ac 00 	sts	0x00AC, r1
	OCR4B =0;
 1b6:	10 92 ab 00 	sts	0x00AB, r1
 1ba:	10 92 aa 00 	sts	0x00AA, r1
	
	//motor 2 OCRs
	TCCR3A= _BV(WGM30)|_BV(COM3C1)|_BV(COM3B1);
 1be:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = _BV(CS30);//|_BV(WGM42);//|_BV(CS40); //   prescaler
 1c2:	80 93 91 00 	sts	0x0091, r24
	
	OCR3C = 0;
 1c6:	10 92 9d 00 	sts	0x009D, r1
 1ca:	10 92 9c 00 	sts	0x009C, r1
	OCR3B =0;
 1ce:	10 92 9b 00 	sts	0x009B, r1
 1d2:	10 92 9a 00 	sts	0x009A, r1
	
    sei ();
 1d6:	78 94       	sei
 1d8:	08 95       	ret

000001da <main>:
}


int main(void)
{			
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 54 02 	sts	0x0254, r24
	char line = 0;
	char tmp =0;
	
	led_on = 1;
	line_triggered = 1;
 1e0:	80 93 58 02 	sts	0x0258, r24
	Setup_Sumo_Ports();
 1e4:	0e 94 90 01 	call	0x320	; 0x320 <Setup_Sumo_Ports>
	ioinit ();
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <ioinit>
	
	//setup pin change edges
	interrupt_edge_port_j = 0x7F; //first seven bits for mouse and 3xline
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	80 93 5b 02 	sts	0x025B, r24
	previous_port_j = 0x00;
 1f2:	10 92 57 02 	sts	0x0257, r1
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	da 01       	movw	r26, r20
 200:	c9 01       	movw	r24, r18

	while(1)
	{	
		for(uint32_t j=0;j<4000000000;j++)
 202:	9c 01       	movw	r18, r24
 204:	ad 01       	movw	r20, r26
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	3f 4f       	sbci	r19, 0xFF	; 255
 20a:	4f 4f       	sbci	r20, 0xFF	; 255
 20c:	5f 4f       	sbci	r21, 0xFF	; 255
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	20 30       	cpi	r18, 0x00	; 0
 218:	68 e2       	ldi	r22, 0x28	; 40
 21a:	36 07       	cpc	r19, r22
 21c:	6b e6       	ldi	r22, 0x6B	; 107
 21e:	46 07       	cpc	r20, r22
 220:	6e ee       	ldi	r22, 0xEE	; 238
 222:	56 07       	cpc	r21, r22
 224:	70 f7       	brcc	.-36     	; 0x202 <main+0x28>
 226:	eb cf       	rjmp	.-42     	; 0x1fe <main+0x24>

00000228 <__vector_17>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
 24a:	80 91 50 02 	lds	r24, 0x0250
 24e:	88 23       	and	r24, r24
 250:	19 f4       	brne	.+6      	; 0x258 <__vector_17+0x30>
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <__vector_17+0x34>
 258:	80 ef       	ldi	r24, 0xF0	; 240
 25a:	90 ef       	ldi	r25, 0xF0	; 240
 25c:	90 93 52 02 	sts	0x0252, r25
 260:	80 93 51 02 	sts	0x0251, r24
 264:	80 91 51 02 	lds	r24, 0x0251
 268:	90 91 52 02 	lds	r25, 0x0252
 26c:	0e 94 b3 01 	call	0x366	; 0x366 <LED_Send_Line>
 270:	80 91 53 02 	lds	r24, 0x0253
 274:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_Set_Common>
 278:	80 91 53 02 	lds	r24, 0x0253
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 53 02 	sts	0x0253, r24
 282:	84 30       	cpi	r24, 0x04	; 4
 284:	91 f0       	breq	.+36     	; 0x2aa <__vector_17+0x82>
 286:	85 30       	cpi	r24, 0x05	; 5
 288:	3c f4       	brge	.+14     	; 0x298 <__vector_17+0x70>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	71 f0       	breq	.+28     	; 0x2aa <__vector_17+0x82>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	64 f4       	brge	.+24     	; 0x2aa <__vector_17+0x82>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	81 f5       	brne	.+96     	; 0x2f6 <__vector_17+0xce>
 296:	09 c0       	rjmp	.+18     	; 0x2aa <__vector_17+0x82>
 298:	86 30       	cpi	r24, 0x06	; 6
 29a:	39 f0       	breq	.+14     	; 0x2aa <__vector_17+0x82>
 29c:	86 30       	cpi	r24, 0x06	; 6
 29e:	2c f0       	brlt	.+10     	; 0x2aa <__vector_17+0x82>
 2a0:	87 30       	cpi	r24, 0x07	; 7
 2a2:	19 f0       	breq	.+6      	; 0x2aa <__vector_17+0x82>
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	39 f5       	brne	.+78     	; 0x2f6 <__vector_17+0xce>
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <__vector_17+0xa8>
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 ab 00 	sts	0x00AB, r25
 2b2:	80 93 aa 00 	sts	0x00AA, r24
 2b6:	90 93 ad 00 	sts	0x00AD, r25
 2ba:	80 93 ac 00 	sts	0x00AC, r24
 2be:	90 93 9b 00 	sts	0x009B, r25
 2c2:	80 93 9a 00 	sts	0x009A, r24
 2c6:	90 93 9d 00 	sts	0x009D, r25
 2ca:	80 93 9c 00 	sts	0x009C, r24
 2ce:	17 c0       	rjmp	.+46     	; 0x2fe <__vector_17+0xd6>
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 ab 00 	sts	0x00AB, r25
 2d8:	80 93 aa 00 	sts	0x00AA, r24
 2dc:	90 93 ad 00 	sts	0x00AD, r25
 2e0:	80 93 ac 00 	sts	0x00AC, r24
 2e4:	90 93 9b 00 	sts	0x009B, r25
 2e8:	80 93 9a 00 	sts	0x009A, r24
 2ec:	90 93 9d 00 	sts	0x009D, r25
 2f0:	80 93 9c 00 	sts	0x009C, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_17+0xd2>
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	14 f0       	brlt	.+4      	; 0x2fe <__vector_17+0xd6>
 2fa:	10 92 53 02 	sts	0x0253, r1
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <Setup_Sumo_Ports>:
 320:	90 ef       	ldi	r25, 0xF0	; 240
 322:	9a b9       	out	0x0a, r25	; 10
 324:	8b b1       	in	r24, 0x0b	; 11
 326:	8f 70       	andi	r24, 0x0F	; 15
 328:	8b b9       	out	0x0b, r24	; 11
 32a:	9d b9       	out	0x0d, r25	; 13
 32c:	80 e3       	ldi	r24, 0x30	; 48
 32e:	80 93 01 01 	sts	0x0101, r24
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	80 93 04 01 	sts	0x0104, r24
 338:	e5 e0       	ldi	r30, 0x05	; 5
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	80 81       	ld	r24, Z
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	80 83       	st	Z, r24
 342:	90 93 0a 01 	sts	0x010A, r25
 346:	eb e0       	ldi	r30, 0x0B	; 11
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	80 81       	ld	r24, Z
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	80 83       	st	Z, r24
 350:	08 95       	ret

00000352 <Get_Switch>:
 352:	90 91 00 01 	lds	r25, 0x0100
 356:	82 95       	swap	r24
 358:	88 0f       	add	r24, r24
 35a:	88 0f       	add	r24, r24
 35c:	80 7c       	andi	r24, 0xC0	; 192
 35e:	98 23       	and	r25, r24
 360:	89 2f       	mov	r24, r25
 362:	99 27       	eor	r25, r25
 364:	08 95       	ret

00000366 <LED_Send_Line>:
 366:	9c 01       	movw	r18, r24
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	20 ff       	sbrs	r18, 0
 36e:	04 c0       	rjmp	.+8      	; 0x378 <LED_Send_Line+0x12>
 370:	80 91 0b 01 	lds	r24, 0x010B
 374:	80 62       	ori	r24, 0x20	; 32
 376:	03 c0       	rjmp	.+6      	; 0x37e <LED_Send_Line+0x18>
 378:	80 91 0b 01 	lds	r24, 0x010B
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	80 93 0b 01 	sts	0x010B, r24
 382:	80 91 0b 01 	lds	r24, 0x010B
 386:	80 61       	ori	r24, 0x10	; 16
 388:	80 93 0b 01 	sts	0x010B, r24
 38c:	00 00       	nop
 38e:	80 91 0b 01 	lds	r24, 0x010B
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	80 93 0b 01 	sts	0x010B, r24
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	40 31       	cpi	r20, 0x10	; 16
 39e:	51 05       	cpc	r21, r1
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <LED_Send_Line+0x42>
 3a2:	36 95       	lsr	r19
 3a4:	27 95       	ror	r18
 3a6:	e2 cf       	rjmp	.-60     	; 0x36c <LED_Send_Line+0x6>
 3a8:	80 91 0b 01 	lds	r24, 0x010B
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	80 93 0b 01 	sts	0x010B, r24
 3b2:	00 00       	nop
 3b4:	80 91 0b 01 	lds	r24, 0x010B
 3b8:	8f 7b       	andi	r24, 0xBF	; 191
 3ba:	80 93 0b 01 	sts	0x010B, r24
 3be:	08 95       	ret

000003c0 <LED_Set_Common>:
 3c0:	eb e0       	ldi	r30, 0x0B	; 11
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	90 81       	ld	r25, Z
 3c6:	90 68       	ori	r25, 0x80	; 128
 3c8:	90 83       	st	Z, r25
 3ca:	9b b1       	in	r25, 0x0b	; 11
 3cc:	9f 78       	andi	r25, 0x8F	; 143
 3ce:	9b b9       	out	0x0b, r25	; 11
 3d0:	9b b1       	in	r25, 0x0b	; 11
 3d2:	82 95       	swap	r24
 3d4:	80 7f       	andi	r24, 0xF0	; 240
 3d6:	98 2b       	or	r25, r24
 3d8:	9b b9       	out	0x0b, r25	; 11
 3da:	80 81       	ld	r24, Z
 3dc:	8f 77       	andi	r24, 0x7F	; 127
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	ff cf       	rjmp	.-2      	; 0x3e2 <_exit>
