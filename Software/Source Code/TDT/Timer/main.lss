
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800200  00800200  00000284  2**0
                  ALLOC
  2 .stab         00000414  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008a  00000000  00000000  00000769  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021b  00000000  00000000  000007f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000111  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00000fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_20>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 e1       	ldi	r30, 0x10	; 16
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a2 30       	cpi	r26, 0x02	; 2
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
 11e:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <__vector_20>:

enum { UP, DOWN };

ISR (TIMER1_OVF_vect)		
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
    static int8_t count =0;  
	//static uint8_t ledon;
	
	switch (count)		/* next LED */
 134:	90 91 00 02 	lds	r25, 0x0200
 138:	92 30       	cpi	r25, 0x02	; 2
 13a:	61 f0       	breq	.+24     	; 0x154 <__vector_20+0x2e>
 13c:	93 30       	cpi	r25, 0x03	; 3
 13e:	1c f4       	brge	.+6      	; 0x146 <__vector_20+0x20>
 140:	91 30       	cpi	r25, 0x01	; 1
 142:	71 f4       	brne	.+28     	; 0x160 <__vector_20+0x3a>
 144:	05 c0       	rjmp	.+10     	; 0x150 <__vector_20+0x2a>
 146:	93 30       	cpi	r25, 0x03	; 3
 148:	39 f0       	breq	.+14     	; 0x158 <__vector_20+0x32>
 14a:	94 30       	cpi	r25, 0x04	; 4
 14c:	49 f4       	brne	.+18     	; 0x160 <__vector_20+0x3a>
 14e:	06 c0       	rjmp	.+12     	; 0x15c <__vector_20+0x36>
	{
		case 1:
			PORTD = 0x10;
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	05 c0       	rjmp	.+10     	; 0x15e <__vector_20+0x38>
			break;
			
		case 2:
			PORTD = 0x20;
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	03 c0       	rjmp	.+6      	; 0x15e <__vector_20+0x38>
			break;
			
		case 3:
			PORTD = 0x40;
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	01 c0       	rjmp	.+2      	; 0x15e <__vector_20+0x38>
			break;
			
		case 4:
			PORTD = 0x80;
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	8b b9       	out	0x0b, r24	; 11
			break;
		
	}
	
	
	if(led_dir == UP) //counting up.
 160:	80 91 01 02 	lds	r24, 0x0201
 164:	88 23       	and	r24, r24
 166:	41 f4       	brne	.+16     	; 0x178 <__vector_20+0x52>
	{
		count++;		
 168:	89 2f       	mov	r24, r25
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 00 02 	sts	0x0200, r24
		if(count>=5)
 170:	85 30       	cpi	r24, 0x05	; 5
 172:	5c f0       	brlt	.+22     	; 0x18a <__vector_20+0x64>
			count =1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	07 c0       	rjmp	.+14     	; 0x186 <__vector_20+0x60>
	}
	else
	{
		count--;	
 178:	89 2f       	mov	r24, r25
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	80 93 00 02 	sts	0x0200, r24
		if(count<=0)
 180:	18 16       	cp	r1, r24
 182:	1c f0       	brlt	.+6      	; 0x18a <__vector_20+0x64>
			count =4;
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	80 93 00 02 	sts	0x0200, r24
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <ioinit>:
	}
}

void ioinit (void)			/* Note [6] */
{
 198:	10 92 80 00 	sts	0x0080, r1
    /* Normal mode */
    TCCR1A = 0;
	
    /*
     * Start timer 1.
     */
    TCCR1B = _BV(CS11)|_BV(CS10); //  1/64 prescaler    
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	80 93 81 00 	sts	0x0081, r24


    /* Enable timer 1 overflow interrupt. */
    TIMSK1 = _BV (TOIE1);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 6f 00 	sts	0x006F, r24
    sei ();
 1a8:	78 94       	sei
 1aa:	08 95       	ret

000001ac <main>:
}


int main(void)
{			
 1ac:	1f 93       	push	r17
	char sw = 0;
	led_dir = UP;
 1ae:	10 92 01 02 	sts	0x0201, r1
	Setup_Sumo_Ports();
 1b2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Setup_Sumo_Ports>
 1b6:	10 92 80 00 	sts	0x0080, r1
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	80 93 81 00 	sts	0x0081, r24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 6f 00 	sts	0x006F, r24
 1c6:	78 94       	sei
	ioinit ();

	while(1)
	{		
		if( (Get_Switch(1)|Get_Switch(2) )) led_dir = UP;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Get_Switch>
 1ce:	18 2f       	mov	r17, r24
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Get_Switch>
 1d6:	18 2b       	or	r17, r24
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <main+0x34>
 1da:	10 92 01 02 	sts	0x0201, r1
 1de:	f4 cf       	rjmp	.-24     	; 0x1c8 <main+0x1c>
		else led_dir = DOWN;					
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 01 02 	sts	0x0201, r24
 1e6:	f0 cf       	rjmp	.-32     	; 0x1c8 <main+0x1c>

000001e8 <Setup_Sumo_Ports>:



void Setup_Sumo_Ports(void)
{
 1e8:	80 ef       	ldi	r24, 0xF0	; 240
 1ea:	8a b9       	out	0x0a, r24	; 10
	//PORT A
	//SRAM Address bits.  Low Byte

	//PORT B
	//SPI BUS

	//PORT C
	//SRAM Addres bits.  High Byte

	//PORT D
	//I2C.  USART2.  LED Matrix CSEL and DSEL
	DDRD = _BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7);
	PORTD &= 0x0F;
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	8b b9       	out	0x0b, r24	; 11

	//PORT E
	//USART1.  SD Card inputs.  Motor2 PWM.  Sound PWM

	//PORT F
	//Extra ADC.  JTAG

	//PORT G
	//SRAM control.  SRAM A16 bit.  Timing oscillator

	//PORT H
	//Mouse (non interrupt).  Motor1 PWM.  Switch inputs
	DDRH = _BV(PD4)|_BV(PD5);
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	80 93 01 01 	sts	0x0101, r24
 1f8:	08 95       	ret

000001fa <Get_Switch>:
#include "sumo_util.h"
#include "sumo_ports.h"

uint8_t Get_Switch(uint8_t sw)
{
 1fa:	90 91 00 01 	lds	r25, 0x0100
 1fe:	82 95       	swap	r24
 200:	88 0f       	add	r24, r24
 202:	88 0f       	add	r24, r24
 204:	80 7c       	andi	r24, 0xC0	; 192
 206:	98 23       	and	r25, r24
	uint8_t swin = SW_PORT;
	return (swin & (sw<<6));
}
 208:	89 2f       	mov	r24, r25
 20a:	99 27       	eor	r25, r25
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <_exit>
