
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800240  00800240  0000046c  2**0
                  ALLOC
  3 .stab         00000414  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000150  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000040b  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000022c  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000508  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d1  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000096  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_10>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_17>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e8 e9       	ldi	r30, 0x98	; 152
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 34       	cpi	r26, 0x40	; 64
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e4       	ldi	r26, 0x40	; 64
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a9 34       	cpi	r26, 0x49	; 73
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
 11e:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <__vector_10>:
      
	
}*/
ISR (PCINT1_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	//mouse_move =1;
	
	//read ports in case there is another change
	int8_t currentm1 = MOUSE_PORT1;
 138:	30 91 03 01 	lds	r19, 0x0103
	int8_t currentm2 = MOUSE_PORT2;
 13c:	80 91 00 01 	lds	r24, 0x0100
	int8_t pin_change = (previous_mouse^currentm1)&(previous_mouse^interrupt_edge_mouse);
 140:	20 91 43 02 	lds	r18, 0x0243
 144:	80 91 43 02 	lds	r24, 0x0243
 148:	90 91 44 02 	lds	r25, 0x0244
 14c:	23 27       	eor	r18, r19
 14e:	89 27       	eor	r24, r25
 150:	28 23       	and	r18, r24
	
	if(pin_change==_BV(MOUSE2_X1))
 152:	24 30       	cpi	r18, 0x04	; 4
 154:	31 f4       	brne	.+12     	; 0x162 <__vector_10+0x3c>
	{
		if(currentm2|MOUSE2_X2) //moving left
			xdif--;
 156:	80 91 46 02 	lds	r24, 0x0246
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	80 93 46 02 	sts	0x0246, r24
 160:	07 c0       	rjmp	.+14     	; 0x170 <__vector_10+0x4a>
		else
			xdif++;
	}
	
	if(pin_change==_BV(MOUSE2_Y1))
 162:	28 30       	cpi	r18, 0x08	; 8
 164:	29 f4       	brne	.+10     	; 0x170 <__vector_10+0x4a>
	{
		if(currentm2|MOUSE2_Y2) //moving left
			ydif--;
 166:	80 91 48 02 	lds	r24, 0x0248
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	80 93 48 02 	sts	0x0248, r24
		else
			ydif++;
	}
		
	
	previous_mouse = currentm1;
 170:	30 93 43 02 	sts	0x0243, r19
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <ioinit>:
	
	
}

ISR (TIMER1_COMPA_vect)		
{
	//static int8_t count =0;
	static int8_t comcount =0;
	static int16_t line;
	int16_t *p;
	
	if(abs(xdif)>abs(ydif))
	{
		if(xdif>=0)
			p = Rightchar;
		else
			p = Leftchar;
	}
	else
	{
		if(ydif>=0)
			p = Upchar;
		else
			p = Downchar;
	}
	
	/*
	switch (comcount)		//which line?
	{
		case 0:
			line = 0xBCBC;
			break;
		case 1:
			line = 0x80A4;
			break;
			
		case 2:
			line = 0xBCBC;
			break;
			
		case 3:
			line = 0xA080;
			break;
			
		case 4:
			line = 0xBCBC;
			break;
		case 5:
			line = 0x8084;
			break;
		case 6:
			line = 0xB9BC;
			break;
		case 7:
			line = 0xAF84;
			break;
		
	}*/
	line = p[comcount];
	
	if(1)
	{
		//send line
		LED_Send_Line(line);
		
		
		//increment common driver
		
		LED_Set_Common(comcount);
		comcount++;
		mouse_move = 0;
	}
	if(comcount > 7)
		comcount = 0; //go back to first line
	
	xdif=0;
	ydif=0;
}

void ioinit (void)			/* Note [6] */
{
 186:	10 92 80 00 	sts	0x0080, r1
    /* Normal mode */
    TCCR1A = 0;
	
    /*
     * Start timer 1.
     */
    TCCR1B = _BV(CS11)|_BV(CS10); //  1/64 prescaler    
 18a:	e1 e8       	ldi	r30, 0x81	; 129
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); //Clear timer on Compare match with OCR1A
 192:	80 81       	ld	r24, Z
 194:	88 60       	ori	r24, 0x08	; 8
 196:	80 83       	st	Z, r24

    /* Enable timer 1 overflow interrupt. */
    TIMSK1 = _BV (OCIE1A);
 198:	22 e0       	ldi	r18, 0x02	; 2
 19a:	20 93 6f 00 	sts	0x006F, r18
	
	OCR1A = 0x030D;    	//0x1FFF = 30Hz  @ 1/8 prescaler
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	93 e0       	ldi	r25, 0x03	; 3
 1a2:	90 93 89 00 	sts	0x0089, r25
 1a6:	80 93 88 00 	sts	0x0088, r24
						//0x7A12 = 1Hz   @ 1/64 prescaler
						//0x186A = 5Hz   @ 1/64 prescaler
						//0x0C35 = 10Hz   @ 1/64 prescaler
						//0x061A = 20Hz   @ 1/64 prescaler
						//0x0411 = 30Hz   @ 1/64 prescaler
						//0x037C = 30Hz   @ 1/64 prescaler
						//0x030D = 40Hz   @ 1/64 prescaler
						
	//Setup Pin Change Inerrupt
	PCICR = _BV(PCIE1);   //enable Pin Change int 1 for PCINT 8-15  (11 for X1)
 1aa:	20 93 68 00 	sts	0x0068, r18
	PCMSK1 = _BV(PCINT9)|_BV(PCINT10)|_BV(PCINT11)|_BV(PCINT12);  //PCINT11
 1ae:	8e e1       	ldi	r24, 0x1E	; 30
 1b0:	80 93 6c 00 	sts	0x006C, r24
	
    sei ();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <main>:
}


int main(void)
{			
 1b8:	1f 93       	push	r17
	char sw = 0;
	led_on = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 45 02 	sts	0x0245, r24
	mouse_move = 1;
 1c0:	80 93 47 02 	sts	0x0247, r24
	Setup_Sumo_Ports();
 1c4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Setup_Sumo_Ports>
	ioinit ();
 1c8:	0e 94 c3 00 	call	0x186	; 0x186 <ioinit>
	
	//setup pin change edges
	interrupt_edge_mouse = 0x0F; //first four bits
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	80 93 44 02 	sts	0x0244, r24
	previous_mouse = 0x00;
 1d2:	10 92 43 02 	sts	0x0243, r1

	while(1)
	{		
		if( (Get_Switch(1)|Get_Switch(2) )) led_on = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 83 01 	call	0x306	; 0x306 <Get_Switch>
 1dc:	18 2f       	mov	r17, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 83 01 	call	0x306	; 0x306 <Get_Switch>
 1e4:	18 2b       	or	r17, r24
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <main+0x38>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 45 02 	sts	0x0245, r24
 1ee:	f3 cf       	rjmp	.-26     	; 0x1d6 <main+0x1e>
		else led_on = 0;					
 1f0:	10 92 45 02 	sts	0x0245, r1
 1f4:	f0 cf       	rjmp	.-32     	; 0x1d6 <main+0x1e>

000001f6 <__vector_17>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	80 91 46 02 	lds	r24, 0x0246
 21c:	20 91 48 02 	lds	r18, 0x0248
 220:	99 27       	eor	r25, r25
 222:	87 fd       	sbrc	r24, 7
 224:	90 95       	com	r25
 226:	97 ff       	sbrs	r25, 7
 228:	03 c0       	rjmp	.+6      	; 0x230 <__vector_17+0x3a>
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	33 27       	eor	r19, r19
 232:	27 fd       	sbrc	r18, 7
 234:	30 95       	com	r19
 236:	37 ff       	sbrs	r19, 7
 238:	03 c0       	rjmp	.+6      	; 0x240 <__vector_17+0x4a>
 23a:	30 95       	com	r19
 23c:	21 95       	neg	r18
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	54 f4       	brge	.+20     	; 0x25a <__vector_17+0x64>
 246:	80 91 46 02 	lds	r24, 0x0246
 24a:	87 fd       	sbrc	r24, 7
 24c:	03 c0       	rjmp	.+6      	; 0x254 <__vector_17+0x5e>
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	0c c0       	rjmp	.+24     	; 0x26c <__vector_17+0x76>
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	09 c0       	rjmp	.+18     	; 0x26c <__vector_17+0x76>
 25a:	80 91 48 02 	lds	r24, 0x0248
 25e:	87 fd       	sbrc	r24, 7
 260:	03 c0       	rjmp	.+6      	; 0x268 <__vector_17+0x72>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	02 c0       	rjmp	.+4      	; 0x26c <__vector_17+0x76>
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	e0 91 42 02 	lds	r30, 0x0242
 270:	ff 27       	eor	r31, r31
 272:	e7 fd       	sbrc	r30, 7
 274:	f0 95       	com	r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e8 0f       	add	r30, r24
 27c:	f9 1f       	adc	r31, r25
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	90 93 41 02 	sts	0x0241, r25
 286:	80 93 40 02 	sts	0x0240, r24
 28a:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_Send_Line>
 28e:	80 91 42 02 	lds	r24, 0x0242
 292:	0e 94 ba 01 	call	0x374	; 0x374 <LED_Set_Common>
 296:	80 91 42 02 	lds	r24, 0x0242
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 42 02 	sts	0x0242, r24
 2a0:	10 92 47 02 	sts	0x0247, r1
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	14 f0       	brlt	.+4      	; 0x2ac <__vector_17+0xb6>
 2a8:	10 92 42 02 	sts	0x0242, r1
 2ac:	10 92 46 02 	sts	0x0246, r1
 2b0:	10 92 48 02 	sts	0x0248, r1
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <Setup_Sumo_Ports>:



void Setup_Sumo_Ports(void)
{
 2d6:	90 ef       	ldi	r25, 0xF0	; 240
 2d8:	9a b9       	out	0x0a, r25	; 10
	//PORT A
	//SRAM Address bits.  Low Byte

	//PORT B
	//SPI BUS

	//PORT C
	//SRAM Addres bits.  High Byte

	//PORT D
	//I2C.  USART2.  LED Matrix CSEL and DSEL
	DDRD = _BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7);
	PORTD &= 0x0F;
 2da:	8b b1       	in	r24, 0x0b	; 11
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	8b b9       	out	0x0b, r24	; 11

	//PORT E
	//USART1.  SD Card inputs.  Motor2 PWM.  Sound PWM

	//PORT F
	//Extra ADC.  JTAG

	//PORT G
	//SRAM control.  SRAM A16 bit.  Timing oscillator

	//PORT H
	//Mouse (non interrupt).  Motor1 PWM.  Switch inputs
	DDRH = _BV(PD4)|_BV(PD5);
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	80 93 01 01 	sts	0x0101, r24

	//PORT J
	//Mouse (interrupts).  Line inputs (interrupts).  3v3 enable.
	DDRJ = _BV(PJ7);
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	80 93 04 01 	sts	0x0104, r24
	PORTJ |= _BV(PJ7);
 2ec:	e5 e0       	ldi	r30, 0x05	; 5
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	80 81       	ld	r24, Z
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	80 83       	st	Z, r24

	//PORT K
	//Voltage sense.  IR range ADC.  Line 4 input (interrupt).

	//PORT L
	//Bump inputs.  LED Matrix control
	DDRL = _BV(PD4)|_BV(PD5)|_BV(PD6)|_BV(PD7);
 2f6:	90 93 0a 01 	sts	0x010A, r25
	PORTL &= 0x0F;
 2fa:	eb e0       	ldi	r30, 0x0B	; 11
 2fc:	f1 e0       	ldi	r31, 0x01	; 1
 2fe:	80 81       	ld	r24, Z
 300:	8f 70       	andi	r24, 0x0F	; 15
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <Get_Switch>:
#include "sumo_util.h"
#include "sumo_ports.h"

uint8_t Get_Switch(uint8_t sw)
{
 306:	90 91 00 01 	lds	r25, 0x0100
 30a:	82 95       	swap	r24
 30c:	88 0f       	add	r24, r24
 30e:	88 0f       	add	r24, r24
 310:	80 7c       	andi	r24, 0xC0	; 192
 312:	98 23       	and	r25, r24
	uint8_t swin = SW_PORT;
	return (swin & (sw<<6));
}
 314:	89 2f       	mov	r24, r25
 316:	99 27       	eor	r25, r25
 318:	08 95       	ret

0000031a <LED_Send_Line>:



void LED_Send_Line(uint16_t line)  //clock in 16 bits into segment driver and latch
{
 31a:	9c 01       	movw	r18, r24
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
	
	for(uint16_t i=0;i<16;i++) //LSB first
	{
		if((line & 0x01) > 0) //check MSB
 320:	20 ff       	sbrs	r18, 0
 322:	04 c0       	rjmp	.+8      	; 0x32c <LED_Send_Line+0x12>
		{
			LED_PORT2 |= _BV(LED_SIN);			
 324:	80 91 0b 01 	lds	r24, 0x010B
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	03 c0       	rjmp	.+6      	; 0x332 <LED_Send_Line+0x18>
		}
		else
		{
			LED_PORT2 &= ~(_BV(LED_SIN));
 32c:	80 91 0b 01 	lds	r24, 0x010B
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	80 93 0b 01 	sts	0x010B, r24
		}
		line >>= 1;  //shift data right one	
		//NOP;
		
		//clock in bit
		LED_PORT2 |= _BV(LED_SCLK);  //set clock high
 336:	80 91 0b 01 	lds	r24, 0x010B
 33a:	80 61       	ori	r24, 0x10	; 16
 33c:	80 93 0b 01 	sts	0x010B, r24
		NOP;
 340:	00 00       	nop
		LED_PORT2 &= ~(_BV(LED_SCLK)); //set clock low		
 342:	80 91 0b 01 	lds	r24, 0x010B
 346:	8f 7e       	andi	r24, 0xEF	; 239
 348:	80 93 0b 01 	sts	0x010B, r24
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	40 31       	cpi	r20, 0x10	; 16
 352:	51 05       	cpc	r21, r1
 354:	19 f0       	breq	.+6      	; 0x35c <LED_Send_Line+0x42>
 356:	36 95       	lsr	r19
 358:	27 95       	ror	r18
 35a:	e2 cf       	rjmp	.-60     	; 0x320 <LED_Send_Line+0x6>
		
	}
	
	//latch in line
		LED_PORT2 |= _BV(LED_LATCH);  //set clock high
 35c:	80 91 0b 01 	lds	r24, 0x010B
 360:	80 64       	ori	r24, 0x40	; 64
 362:	80 93 0b 01 	sts	0x010B, r24
		NOP;
 366:	00 00       	nop
		LED_PORT2 &= ~(_BV(LED_LATCH)); //set clock low	
 368:	80 91 0b 01 	lds	r24, 0x010B
 36c:	8f 7b       	andi	r24, 0xBF	; 191
 36e:	80 93 0b 01 	sts	0x010B, r24
 372:	08 95       	ret

00000374 <LED_Set_Common>:
}


void LED_Set_Common(uint8_t com)	//set the common driver  Range 0-7
{
 374:	eb e0       	ldi	r30, 0x0B	; 11
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	90 81       	ld	r25, Z
 37a:	90 68       	ori	r25, 0x80	; 128
 37c:	90 83       	st	Z, r25
	LED_PORT2 |= _BV(LED_BLANK);  //Blank LEDs
				
		com <<= 4;   //shift so it matches bits on port
		LED_PORT1 &= ~(_BV(LED_CSEL0)|_BV(LED_CSEL1)|_BV(LED_CSEL2));  //clear CSEL bits
 37e:	9b b1       	in	r25, 0x0b	; 11
 380:	9f 78       	andi	r25, 0x8F	; 143
 382:	9b b9       	out	0x0b, r25	; 11
		LED_PORT1 |= com;  //set new CSEL values
 384:	9b b1       	in	r25, 0x0b	; 11
 386:	82 95       	swap	r24
 388:	80 7f       	andi	r24, 0xF0	; 240
 38a:	98 2b       	or	r25, r24
 38c:	9b b9       	out	0x0b, r25	; 11
		
	LED_PORT2 &= ~(_BV(LED_BLANK)); //Un-blank LEDS
 38e:	80 81       	ld	r24, Z
 390:	8f 77       	andi	r24, 0x7F	; 127
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <_exit>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <_exit>
